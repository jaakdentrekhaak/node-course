{"version":3,"sources":["../../../src/controllers/users/user.route.ts"],"sourcesContent":["import { NextFunction, Request, Response, Router } from \"express\";\nimport { getList } from \"./handlers/getList.handler.js\";\nimport { create } from \"./handlers/create.handler.js\";\nimport { get } from \"./handlers/get.handler.js\";\nimport { update } from \"./handlers/update.handler.js\";\nimport { deleteUser } from \"./handlers/delete.handler.js\";\nimport { plainToInstance } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { UserBody } from \"../../contracts/user.body.js\";\nimport { UserView } from \"../../contracts/user.view.js\";\n\nconst adminMiddleware = (req: Request, res: Response, next: NextFunction) => {\n  if (req.header(\"x-auth\") !== \"api-key\") {\n    return res.status(401).send(\"Unauthorized\");\n  }\n  next();\n};\n\nconst patchValidationMiddleware = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  const transformed = plainToInstance(UserBody, req.body, {\n    // undefined properties not taken into account\n    exposeUnsetFields: false,\n  });\n  const validationErrors = await validate(transformed, {\n    // missing properties not validated -> we wouldn't want this when creating an entity for example\n    skipMissingProperties: true,\n    whitelist: true,\n    forbidNonWhitelisted: true,\n  });\n  if (validationErrors.length) {\n    return next(validationErrors);\n  }\n  req.body = transformed;\n  next();\n};\n\nconst representationMiddleware = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  const transformed = plainToInstance(UserView, res.locals.body); // Note the use of res.locals here. Locals is a way to transport data from one middleware to another.\n  res.json(transformed);\n};\n\nexport class UserRoute {\n  router: Router;\n  path: String;\n  constructor() {\n    this.router = Router();\n    this.path = \"users\";\n\n    this.router.get(\"/\", getList);\n    this.router.post(\"/\", adminMiddleware, create);\n    this.router.get(\"/:id\", get);\n    this.router.patch(\n      \"/:id\",\n      patchValidationMiddleware,\n      update,\n      representationMiddleware\n    );\n    this.router.delete(\"/:id\", deleteUser);\n  }\n}\n"],"names":["Router","getList","create","get","update","deleteUser","plainToInstance","validate","UserBody","UserView","adminMiddleware","req","res","next","header","status","send","patchValidationMiddleware","transformed","body","exposeUnsetFields","validationErrors","skipMissingProperties","whitelist","forbidNonWhitelisted","length","representationMiddleware","locals","json","UserRoute","router","path","constructor","post","patch","delete"],"mappings":"AAAA,SAA0CA,MAAM,QAAQ,UAAU;AAClE,SAASC,OAAO,QAAQ,gCAAgC;AACxD,SAASC,MAAM,QAAQ,+BAA+B;AACtD,SAASC,GAAG,QAAQ,4BAA4B;AAChD,SAASC,MAAM,QAAQ,+BAA+B;AACtD,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,QAAQ,QAAQ,+BAA+B;AACxD,SAASC,QAAQ,QAAQ,+BAA+B;AAExD,MAAMC,kBAAkB,CAACC,KAAcC,KAAeC;IACpD,IAAIF,IAAIG,MAAM,CAAC,cAAc,WAAW;QACtC,OAAOF,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;IAC9B;IACAH;AACF;AAEA,MAAMI,4BAA4B,OAChCN,KACAC,KACAC;IAEA,MAAMK,cAAcZ,gBAAgBE,UAAUG,IAAIQ,IAAI,EAAE;QACtD,8CAA8C;QAC9CC,mBAAmB;IACrB;IACA,MAAMC,mBAAmB,MAAMd,SAASW,aAAa;QACnD,gGAAgG;QAChGI,uBAAuB;QACvBC,WAAW;QACXC,sBAAsB;IACxB;IACA,IAAIH,iBAAiBI,MAAM,EAAE;QAC3B,OAAOZ,KAAKQ;IACd;IACAV,IAAIQ,IAAI,GAAGD;IACXL;AACF;AAEA,MAAMa,2BAA2B,OAC/Bf,KACAC,KACAC;IAEA,MAAMK,cAAcZ,gBAAgBG,UAAUG,IAAIe,MAAM,CAACR,IAAI,GAAG,qGAAqG;IACrKP,IAAIgB,IAAI,CAACV;AACX;AAEA,OAAO,MAAMW;IACXC,OAAe;IACfC,KAAa;IACbC,aAAc;QACZ,IAAI,CAACF,MAAM,GAAG9B;QACd,IAAI,CAAC+B,IAAI,GAAG;QAEZ,IAAI,CAACD,MAAM,CAAC3B,GAAG,CAAC,KAAKF;QACrB,IAAI,CAAC6B,MAAM,CAACG,IAAI,CAAC,KAAKvB,iBAAiBR;QACvC,IAAI,CAAC4B,MAAM,CAAC3B,GAAG,CAAC,QAAQA;QACxB,IAAI,CAAC2B,MAAM,CAACI,KAAK,CACf,QACAjB,2BACAb,QACAsB;QAEF,IAAI,CAACI,MAAM,CAACK,MAAM,CAAC,QAAQ9B;IAC7B;AACF"}